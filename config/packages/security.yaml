security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # API login
        login:
            # ici on definit la config de tout
            # endpoint qui commence par "/api/login"
            pattern: ^/api/login
            # ici stateless indique que la securité sera sans 
            # etat (le serveur ne stock 
            # pas l'etat de l'utilisateur authentifié)
            stateless: true
            json_login:
                # ici le endpoint pour obtenir le token
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            # pour les routes sécurisées (access_control etc.), un JWT es nécessaire
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator



            # form_login:
            #     # name of the route created previously
            #     login_path: login_index # GET => affiche le form
            #     check_path: login_index # POST => traite le form
            
            logout:
                path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # il faut être Administrateur pour accéder au back-office

        #   app_back_movie_index       GET        ANY      ANY    /back/movie/                             
        #   app_back_movie_new         GET|POST   ANY      ANY    /back/movie/new                          
        #   app_back_movie_show        GET        ANY      ANY    /back/movie/{id}                         
        #   app_back_movie_edit        GET|POST   ANY      ANY    /back/movie/{id}/edit                    
        #   app_back_movie_delete      POST       ANY      ANY    /back/movie/{id}                         
        #   app_back_season_index      GET        ANY      ANY    /back/season/movie/{id}                  
        #   app_back_season_new        GET|POST   ANY      ANY    /back/season/new/movie/{id}              
        #   app_back_season_edit       GET|POST   ANY      ANY    /back/season/{id}/edit/movie/{movie_id}  
        #   app_back_season_delete     POST       ANY      ANY    /back/season/{id}/movie/{movie_id}

        # toutes les routes pour ajout et modification : pas de slash entre back et edit ou new
        - { path: ^/back/(.*)(new|edit), roles: ROLE_ADMIN}
        # toutes les soumissions de formulaires du back
        - { path: ^/back, roles: ROLE_ADMIN, methods: [POST]}
        # le back (en GET)
        - { path: ^/back, roles: ROLE_MANAGER }
        # toutes les routes qui liées aux favoris et aux reviews
        - { path: (favorites|review), roles: ROLE_USER }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_ADMIN }
        

    role_hierarchy:
        ROLE_MANAGER: ROLE_USER
        ROLE_ADMIN: ROLE_MANAGER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
